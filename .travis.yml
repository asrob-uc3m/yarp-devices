# Authors: see AUTHORS.md at project root.
# CopyPolicy: released under the terms of the LGPLv2.1, see LICENSE at project root.
# URL: https://github.com/asrob-uc3m/yarp-devices

language: cpp
dist: bionic
os: linux

compiler:
  - gcc
  - clang

env:
  global:
    - CACHE_DIR=~/cached-deps
    - YCM_CHECKOUT=ycm-0.13
  matrix:
    - YARP_CHECKOUT=yarp-3.5
    - YARP_CHECKOUT=yarp-3.4

matrix:
  include:
    - if: type = cron
      compiler: gcc
      env: ROBOTOLOGY_CHECKOUT=master
    - if: type = cron
      compiler: clang
      env: ROBOTOLOGY_CHECKOUT=master

cache:
  directories: $CACHE_DIR

addons:
  apt:
    packages:
    # device deps
    - libserial-dev
    - libboost-dev # libserial-dev dependency (packaging bug on Xenial and later)

    - libgtest-dev # unit testing
    - lcov # code coverage

branches:
  except:
  - /^.*appveyor.*$/

before_install:
  #-- Code coverage
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

install:
  #-- Install wiringPi
  - >
    if [ ! -d "$CACHE_DIR/libwiringPi" ]; then
        echo "libwiringPi not in cache"
        git clone --depth=1 https://github.com/asrob-uc3m/wiringPi ~/wiringPi
        make -C ~/wiringPi/wiringPi -j$(nproc) install DESTDIR="$CACHE_DIR/libwiringPi" PREFIX="" LDCONFIG=""
    else
        echo "libwiringPi already in cache"
    fi
  - export wiringPi_ROOT="$CACHE_DIR/libwiringPi"

  #-- Install YCM
  - >
    source "$TRAVIS_BUILD_DIR/scripts/travis/git-cache-dependency.sh"
    --package-name YCM
    --repo-url https://github.com/robotology/ycm
    --repo-checkout "${ROBOTOLOGY_CHECKOUT:-$YCM_CHECKOUT}"

  #-- Install YARP
  - >
    source "$TRAVIS_BUILD_DIR/scripts/travis/git-cache-dependency.sh"
    --package-name YARP
    --repo-url https://github.com/robotology/yarp
    --repo-checkout "${ROBOTOLOGY_CHECKOUT:-$YARP_CHECKOUT}"
    --additional-cmake-options "-DSKIP_ACE:BOOL=ON"
    --prepend-to-linker-path lib
    --additional-export-paths "YARP_DATA_DIRS;share/yarp"

before_script:
  - mkdir -p "$TRAVIS_BUILD_DIR/build" && cd "$_"
  - cmake .. -DCMAKE_INSTALL_PREFIX="$PWD/install" -DENABLE_coverage:BOOL=ON -DENABLE_examples:BOOL=ON
  - make install

script:
  - echo "No unit tests available"

after_success:
  #-- Code coverage
  - if [ "$CXX" = "g++" ]; then source "$TRAVIS_BUILD_DIR/scripts/travis/coverage.sh"; fi

  - cd "$TRAVIS_BUILD_DIR/build" && make uninstall
